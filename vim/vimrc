" .vimrc

" Concepts {{{
"
"
" }}}

" General {{{

" Use vim defaults option. (Don"t use vi defaults option.)
set nocompatible

" Reset Autocmd group
augroup autocmds
  autocmd!
augroup END

" }}}

" Directory {{{

let $DOTVIM = expand("~/.vim")
let g:path = {
      \ "bundle"   : $DOTVIM . "/bundle",
      \ "neobundle": $DOTVIM . "/bundle/neobundle",
      \ "swap"     : $DOTVIM . "/tmp/swap",
      \ "bak"      : $DOTVIM . "/tmp/bak",
      \ "undo"     : $DOTVIM . "/tmp/undo"
      \}

" }}}

" Encoding {{{

let &termencoding = &encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932
set fileformats=unix,dos,mac

" }}}

" Plugins  {{{

" NeoBundle {{{

if has("vim_starting")
  let &runtimepath .= ",".g:path.neobundle
endif

if !isdirectory(g:path.neobundle)
  echo "Could not locate neobundle.\n"
  let download_neobundle = confirm("Do you want to download `neobundle`?", "&Yes\n&No")
  if ( download_neobundle == 1 )
    silent execute "!git clone https://github.com/Shougo/neobundle.vim ". g:path.neobundle
  endif
endif

" To load remote plugin
call neobundle#rc(g:path.bundle)

" Let NeoBundle manage NeoBundle
NeoBundleFetch "Shougo/neobundle.vim"

" }}}

" Dependencies {{{

" {{{ common plugins (vimproc & vital)

NeoBundle "Shougo/vimproc.vim", { "build" : {
      \   "windows" : "mingw32-make -f make_mingw32.mak",
      \   "cygwin"  : "make -f make_cygwin.mak",
      \   "mac"     : "make -f make_mac.mak",
      \   "unix"    : "make -f make_unix.mak",
      \ }}

NeoBundle "vim-jp/vital.vim"

" }}}

" Text object {{{

NeoBundle "kana/vim-textobj-user"
NeoBundle "kana/vim-textobj-entire", { "depends" : "kana/vim-textobj-user" }
NeoBundle "kana/vim-textobj-function", { "depends" : "kana/vim-textobj-user" }
NeoBundle "kana/vim-textobj-indent", { "depends" : "kana/vim-textobj-user" }
NeoBundle "rhysd/vim-textobj-ruby", { "depends" : "kana/vim-textobj-user" }
NeoBundle "osyo-manga/vim-textobj-multiblock", { "depends" : "kana/vim-textobj-user" }
NeoBundle "osyo-manga/vim-textobj-multitextobj", { "depends" : "kana/vim-textobj-user" }

" }}}

" Operator {{{

NeoBundle "kana/vim-operator-user"
NeoBundle "tyru/operator-html-escape.vim", { "depends" : "kana/vim-operator-user" }

" }}}

" {{{ Unite

NeoBundleLazy "Shougo/unite.vim", { "depends" : [ "Shougo/vimproc.vim" ] }
NeoBundleLazy "rhysd/unite-ruby-require.vim", { "depends" : [ "Shougo/unite.vim" ] }
NeoBundleLazy "Shougo/unite-help", { "depends" : [ "Shougo/unite.vim" ] }
NeoBundleLazy "Shougo/unite-outline", { "depends" : [ "Shougo/unite.vim" ] }
NeoBundleLazy "ujihisa/unite-colorscheme", { "depends" : [ "Shougo/unite.vim" ] }
NeoBundleLazy "ujihisa/unite-locate", { "depends" : [ "Shougo/unite.vim" ] }
NeoBundleLazy "osyo-manga/unite-quickfix", { "depends" : [ "Shougo/unite.vim" ] }
NeoBundleLazy "Shougo/unite-ssh", { "depends" : [ "Shougo/unite.vim" ] }

" }}}

" {{{ vimshell

NeoBundleLazy "Shougo/vimshell.vim", { "depends" : [ "Shougo/vimproc.vim" ] }
NeoBundleLazy "ujihisa/vimshell-ssh", { "depends" : [ "Shougo/vimshell.vim" ] }

" }}}

" {{{ vimfiler

NeoBundleLazy "Shougo/vimfiler.vim", { "depends" : [ "Shougo/unite.vim" ] }

"}}}

" {{{ neocomplete

NeoBundleLazy "Shougo/neocomplete.vim"

" }}}

" {{{ snippets

NeoBundleLazy "Shougo/neosnippet.vim"
NeoBundleLazy "Shougo/neosnippet-snippets", { "depends" : [ "Shougo/neosnippet.vim" ] }
NeoBundleLazy "honza/vim-snippets"
NeoBundleLazy "matthewsimo/angular-vim-snippets"

" }}}

" {{{ colorschemes

NeoBundle 'cocopon/iceberg.vim'
NeoBundle 'w0ng/vim-hybrid'

" }}}

" }}}

" Required {{{

filetype plugin indent on

" }}}

" {{{ Configurations

if neobundle#tap('unite.vim') " {{{

  call neobundle#config({
        \   'autoload' : {
        \     'commands' : [
        \       {
        \         'name' : 'Unite',
        \         'complete' : 'customlist,unite#complete_source'
        \       },
        \       'UniteWithCursorWord',
        \       'UniteWithInput'
        \     ]
        \   }
        \ })

  function! s:unite_menu_map_func(key, value)
    let [word, value] = a:value
    if isdirectory(value)
      return {
            \   'word' : '[directory] ' . word,
            \   'kind' : 'directory',
            \   'action__directory' : value
            \ }
    elseif !empty(glob(value))
      return {
            \   'word' : '[file] ' . word,
            \   'kind' : 'file',
            \   'default_action' : 'tabdrop',
            \   'action__path' : value,
            \ }
    else
      return {
            \   'word' : '[command] ' . word,
            \   'kind' : 'command',
            \   'action__command' : value
            \ }
    endif
  endfunction

  function! neobundle#tapped.hooks.on_source(bundle)

    " General
    let g:unite_force_overwrite_statusline = 0
    let g:unite_kind_jump_list_after_jump_scroll=0
    let g:unite_enable_start_insert = 0
    let g:unite_source_rec_min_cache_files = 1000
    let g:unite_source_rec_max_cache_files = 5000
    let g:unite_source_file_mru_long_limit = 100000
    let g:unite_source_file_mru_limit = 100000
    let g:unite_source_directory_mru_long_limit = 100000
    let g:unite_prompt = '❯ '

    " Unite-menu
    let g:unite_source_menu_menus = get(g:, 'unite_source_menu_menus', {})
    let g:unite_source_menu_menus.global = { 'description' : 'global shortcut' }
    let g:unite_source_menu_menus.unite = { 'description' : 'unite shortcut' }
    let g:unite_source_menu_menus.global.map = function('s:unite_menu_map_func')
    let g:unite_source_menu_menus.unite.map = function('s:unite_menu_map_func')
    let g:unite_source_menu_menus.global.candidates = [
          \   [ '[edit] vimrc' , $MYVIMRC ],
          \   [ '[edit] secret_vimrc' , expand('~/.secret_vimrc') ],
          \   [ '[terminal] VimShell' , ':VimShell' ],
          \   [ '[twitter] TweetVim' , ':Unite tweetvim' ],
          \   [ '[lingr] J6uil' , ':J6uil' ],
          \ ]
    let g:unite_source_menu_menus.unite.candidates = [
          \   [ 'neobundle/update' , ':Unite neobundle/update -log' ],
          \   [ 'neobundle/install' , ':Unite neobundle/install -log' ],
          \   [ 'J6uil/rooms' , ':Unite J6uil/rooms' ],
          \   [ 'J6uil/members' , ':Unite J6uil/members' ],
          \   [ 'Blog/posts' , ':Unite file:~/Sites/blog.supermomonga.com/source/posts/' ],
          \   [ 'TweetVim' , ':Unite tweetvim' ],
          \   [ 'files', ':Unite -start-insert -buffer-name=files buffer_tab file file_mru'],
          \   [ 'function', ':Unite -start-insert -default-action=edit function'],
          \   [ 'variable', ':Unite -start-insert -default-action=edit variable'],
          \   [ 'outline', ':Unite -start-insert outline'],
          \   [ 'help', ':Unite -start-insert help'],
          \   [ 'buffer', ':Unite -start-insert buffer'],
          \   [ 'line', ':Unite -start-insert -auto-preview -buffer-name=search line'],
          \   [ 'quickfix', ':Unite -no-split -no-quit -auto-preview quickfix -buffer-name=unite_qf'],
          \   [ 'grep', ':Unite grep -max-multi-lines=1 -truncate -default-action=tabopen -buffer-name=unite_grep'],
          \   [ 'source', ':Unite -start-insert source'],
          \   [ 'locate', ':Unite -start-insert locate'],
          \   [ 'theme', ':Unite -auto-preview colorscheme'],
          \   [ 'resume grep', ':UniteResume unite_grep'],
          \   [ 'resume quickfix', ':UniteResume unite_qf'],
          \ ]

  endfunction

  nnoremap <silent> <Space>u  :<C-u>Unite -start-insert menu:unite<CR>
  nnoremap <silent> <Space>m  :<C-u>Unite -start-insert menu:global<CR>
  nnoremap <silent> <Space>f  :<C-u>Unite -start-insert -buffer-name=files buffer_tab file_mru<CR>
  nnoremap [unite] <Nop>
  nmap zu [unite]

  nnoremap <silent> [unite]u :<C-u>Unite -start-insert -buffer-name=files buffer_tab file_mru<CR>
  nnoremap <silent> [unite]y :<C-u>Unite history/yank -winheight=9 -hide-source-names<CR>
  nnoremap <silent> [unite]s :<C-u>Unite svn/status -no-start-insert<CR>
  nnoremap <silent> [unite]c :<C-u>Unite colorscheme -auto-preview<CR>
  nnoremap <silent> [unite]g :<C-u>Unite grep -max-multi-lines=1 -truncate -default-action=tabopen -buffer-name=unite_grep<CR>

  if neobundle#is_installed('unite-quickfix')
    nnoremap <silent> <Space>q  :<C-u>Unite -no-quit -auto-preview -no-split quickfix<CR>
  endif
  if neobundle#is_installed('unite-help')
    nnoremap <silent> <Space>o  :<C-u>Unite -start-insert -auto-preview
          \ -no-split outline<CR>
  endif
  if neobundle#is_installed('unite-outline')
    nnoremap <silent> <Space>h  :<C-u>Unite -start-insert help<CR>
  endif

endif " }}}

if neobundle#tap('vimfiler.vim') " {{{

  call neobundle#config({
        \ 'autoload' : {
        \   'commands' : [
        \     { 'name' : 'VimFiler', 'complete' : 'customlist,vimfiler#complete' },
        \     { 'name' : 'VimFilerExplorer', 'complete' : 'customlist,vimfiler#complete' },
        \     { 'name' : 'Edit', 'complete' : 'customlist,vimfiler#complete' },
        \     { 'name' : 'Write', 'complete' : 'customlist,vimfiler#complete' },
        \     'Read',
        \     'Source'
        \   ],
        \   'mappings' : '<Plug>(vimfiler_',
        \   'explorer' : 1,
        \ }
        \ })

  let g:vimfiler_safe_mode_by_default = 0
  let g:unite_kind_file_use_trashbox = 1
  let g:vimfiler_as_default_explorer = 1

  nnoremap <Space>e  :<C-u>VimFiler<CR>

endif " }}}

" }}}

" }}}

" Appearance {{{

" Don"t ring a bell and flash
set vb t_vb=

" Show invisible chars
set list
" Symbols to use indent or other
" NOTE: kakkoii unicode moji
" - http://unicode-table.com/en/sections/dingbats/
" - http://unicode-table.com/en/sections/spacing-modifier-letters/
" 		test   
set listchars=tab:❯\ ,trail:˼,extends:»,precedes:«,nbsp:%

" When input close bracket, highlight start bracket.
set showmatch

" Use twice the width of ASCII characters.
set ambiwidth=double

syntax enable

colorscheme hybrid
" hi Normal       ctermfg=252 ctermbg=none

" }}}

" History  {{{

" Command history
set history=10000

" }}}

" Folding  {{{

" Use marker to fold
set foldmethod=marker

" Open folding when move in to one
" set foldopen=all

" Close folding when move out of one
" set foldclose=all

" }}}

" Movement  {{{

" `BS` can delete newline or indent
set backspace=indent,eol,start

" Can move at eol, bol
set whichwrap=b,s,h,l,<,>,[,]

" }}}

" Indent  {{{

" Use Space instead of Tab to make indent
set expandtab

set tabstop=2

" Hoe many spaces to each indent level
set shiftwidth=2

" Automatically adjust indent
set autoindent

" Automatically indent when insert a new line
set smartindent

" Insert an indent when keydown <Tab> in indent spaces
set smarttab

" }}}
