if &compatible
  set nocompatible               " Be iMproved
endif

let s:is_win = has('win32') || has('win64')
if ( s:is_win )
  language C
  language messages C
else
  language en_US.UTF-8
  language messages en_US.UTF-8
endif

let &termencoding = &encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932
set fileformats=unix,dos,mac

let s:vim_dir = expand('~/.vim')
let s:dein_repo_dir = s:vim_dir . '/bundle/repos/github.com/Shougo/dein.vim'

if !isdirectory(s:dein_repo_dir)
  echo 'This vimrc required dein.vim. Please execute apply.sh before.'
  exit
endif

let &runtimepath = s:dein_repo_dir .','. &runtimepath

if dein#load_state(s:vim_dir, s:vim_dir . '/plugins.toml')
  call dein#begin(s:vim_dir)
  call dein#load_toml(s:vim_dir . '/plugins.toml')
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on
syntax enable

set background=dark
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
colorscheme hybrid

set laststatus=2
set showtabline=2
set listchars=tab:\ \ ,trail:˼,extends:»,precedes:«,nbsp:%
set vb t_vb=

set showmatch
set wrap
set ambiwidth=double

" WIP tabpage
highlight normal ctermbg=none
highlight TabLine ctermbg=250 ctermfg=246
highlight TabLineFill ctermbg=250 ctermfg=246
highlight TabLineSel ctermbg=none ctermfg=15 cterm=bold

" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ

" }}}

" History  {{{

" Command history
set history=10000

" }}}

" Folding  {{{

" Use marker to fold
set foldmethod=marker

" Open folding when move in to one
" set foldopen=all

" Close folding when move out of one
" set foldclose=all

" }}}

" Movement  {{{

" `BS` can delete newline or indent
set backspace=indent,eol,start

" Can move at eol, bol
set whichwrap=b,s,h,l,<,>,[,]

" }}}

" Indent  {{{

" Use Space instead of Tab to make indent
set expandtab
augroup setExpandTab
  autocmd!
  autocmd FileType php let &expandtab=0
augroup END

set tabstop=2

" Hoe many spaces to each indent level
set shiftwidth=2

" Automatically adjust indent
set autoindent

" Automatically indent when insert a new line
set smartindent

" Insert an indent when keydown <Tab> in indent spaces
set smarttab

" }}}

" {{{ Key mapping

"   This section is common key mapping.
"
"     ex. inoremap <silent>thb ->
"
"   Plugin key mapping is Plugin section.
"
inoremap <silent>thb ->
inoremap <expr> <C-R><C-R> expand('%:p')
inoremap <expr> :d strftime('%Y/%m/%d')
inoremap <silent><?? <?= ?><Left><Left>
inoremap <silent>$$ $this->
inoremap <silent>ppk $this->util->getPK('?')

" emacs like keymap
inoremap <C-e> <END>
inoremap <C-a> <HOME>
inoremap <C-f> <RIGHT>
inoremap <C-b> <LEFT>
inoremap <C-h> <BS>
" inoremap <C-k> <ESC>lc$
cnoremap <C-e> <END>
cnoremap <C-a> <HOME>
cnoremap <C-f> <RIGHT>
cnoremap <C-b> <LEFT>
cnoremap <C-p> <UP>
cnoremap <C-n> <DOWN>
cnoremap <C-h> <BS>

" display lines downward, uoward
nnoremap <silent> j gj
nnoremap <silent> k gk

" }}}
