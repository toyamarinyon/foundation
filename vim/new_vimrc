
" ---------------------------------------------------------
" Initialize:

if &compatible
  set nocompatible
endif

let s:is_win = has('win32') || has('win64')
if ( s:is_win )
  language C
  language messages C
else
  language en_US.UTF-8
  language messages en_US.UTF-8
endif

" ---------------------------------------------------------
" Encoding:

let &termencoding = &encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932
set fileformats=unix,dos,mac

" ---------------------------------------------------------
" PluginManagement:

let s:vim_dir = expand('~/.vim')
let s:dein_repo_dir = s:vim_dir . '/bundle/repos/github.com/Shougo/dein.vim'

if !isdirectory(s:dein_repo_dir)
  echo 'This vimrc required dein.vim. Please execute apply.sh before.'
  exit
endif

let &runtimepath = s:dein_repo_dir .','. &runtimepath

if dein#load_state(s:vim_dir, s:vim_dir . '/plugins.toml')
  call dein#begin(s:vim_dir)
  call dein#load_toml(s:vim_dir . '/plugins.toml')
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on
syntax enable

" ---------------------------------------------------------
" Appearance:


set background=dark
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
colorscheme hybrid

set laststatus=2
set showtabline=2
set listchars=tab:\ \ ,trail:˼,extends:»,precedes:«,nbsp:%
set vb t_vb=

set showmatch
set wrap
set ambiwidth=double

" WIP tabpage
highlight normal ctermbg=none
highlight TabLine ctermbg=250 ctermfg=246
highlight TabLineFill ctermbg=250 ctermfg=246
highlight TabLineSel ctermbg=none ctermfg=15 cterm=bold

function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

function! s:my_tabline()
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2

" ---------------------------------------------------------
" Edit:

set history=10000
set foldmethod=marker
set backspace=indent,eol,start
set whichwrap=b,s,h,l,<,>,[,]
set expandtab
augroup setExpandTab
  autocmd!
  autocmd FileType php let &expandtab=0
augroup END
set tabstop=2
set shiftwidth=2
set autoindent
set smartindent
set smarttab


" ---------------------------------------------------------
" Keymap:

inoremap <silent>thb ->
inoremap <expr> <C-R><C-R> expand('%:p')
inoremap <expr> :d strftime('%Y/%m/%d')
inoremap <silent><?? <?= ?><Left><Left>
inoremap <silent>$$ $this->
inoremap <silent>ppk $this->util->getPK('?')

inoremap <C-e> <END>
inoremap <C-a> <HOME>
inoremap <C-f> <RIGHT>
inoremap <C-b> <LEFT>
inoremap <C-h> <BS>
cnoremap <C-e> <END>
cnoremap <C-a> <HOME>
cnoremap <C-f> <RIGHT>
cnoremap <C-b> <LEFT>
cnoremap <C-p> <UP>
cnoremap <C-n> <DOWN>
cnoremap <C-h> <BS>

nnoremap <silent> j gj
nnoremap <silent> k gk

nnoremap    [Tab]   <Nop>
nmap    t [Tab]
map <silent> [Tab]c :tablast <bar> tabnew<CR>
map <silent> [Tab]x :tabclose<CR>
map <silent> [Tab]n :tabnext<CR>
map <silent> [Tab]p :tabprevious<CR>
